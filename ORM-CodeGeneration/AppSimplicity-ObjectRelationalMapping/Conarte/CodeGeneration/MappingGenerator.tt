<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="D:\Projects\AppSimplicity-Nhibernate\AppSimplicity-ObjectRelationalMapping\Assemblies\SchemaDiscovery\AppSimplicity.SchemaDiscovery.dll" #>
<#@ Import Namespace="AppSimplicity.SchemaDiscovery" #>
<#@ Import Namespace="System.IO" #>
<#
string localSchemaFile = Host.ResolvePath(@"..\AppSimplicity\AppSimplicity.SchemaDiscovery.xml");

AppSimplicity.SchemaDiscovery.Entities.Project project = AppSimplicity.SchemaDiscovery.Entities.Project.LoadFromFile(localSchemaFile);

foreach (AppSimplicity.SchemaDiscovery.Entities.DataSource ds in project.DataSources)
{
    foreach (AppSimplicity.SchemaDiscovery.Entities.Table table in ds.Tables)
    {
        string scope = "";
        switch (table.Scope) 
        {
			case AppSimplicity.SchemaDiscovery.Entities.AbstractTable.ClassScopes._Friend:
                scope = "sealed";
                break;
            case AppSimplicity.SchemaDiscovery.Entities.AbstractTable.ClassScopes._Protected:
                scope = "protected";
                break;
            case AppSimplicity.SchemaDiscovery.Entities.AbstractTable.ClassScopes._Public:
                scope = "public";
                break;				 
        }
#>
<?xml version="1.0"?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" assembly="<#= project.RootNamespace #>" namespace="<#= project.RootNamespace #>.<#= ds.GeneratedNamespace #>">
  <class name="<#= table.ClassName #>" table="<#= table.Name #>">
<#
    foreach (AppSimplicity.SchemaDiscovery.Entities.Column column in table.Columns) 
    {
        string clrTarget = column.CLRTargetType;
        if (column.IsCLRNullable) 
        {
            clrTarget = clrTarget + " ?"; 
        }

        if (column.IsIdentity)
        {
            string generator = "identity";            
#>
		<id name="<#= column.PropertyName #>" column="<#= column.ColumnName #>">		
			<generator class="<#= generator #>" />
		</id>
<#
        }
        else 
        { 
#>
		<property name="<#= column.PropertyName #>" />		
<#        
        }

    }
#>
  </class>
</hibernate-mapping>
<#             
        
			SaveOutput(String.Format(@"..\Conarte\Mappings\{0}.hbm.xml", table.ClassName));
        }
    
    }
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
