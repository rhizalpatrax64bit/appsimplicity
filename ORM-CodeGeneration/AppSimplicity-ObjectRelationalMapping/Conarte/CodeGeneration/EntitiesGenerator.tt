<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="D:\Projects\AppSimplicity-Nhibernate\AppSimplicity-ObjectRelationalMapping\Assemblies\SchemaDiscovery\AppSimplicity.SchemaDiscovery.dll" #>
<#@ Import Namespace="AppSimplicity.SchemaDiscovery" #>
<#@ Import Namespace="System.IO" #>
<#
string localSchemaFile = Host.ResolvePath(@"..\AppSimplicity\AppSimplicity.SchemaDiscovery.xml");
//string outputDirectory = Host.ResolvePath(@"..\Conarte\");

AppSimplicity.SchemaDiscovery.Entities.Project project = AppSimplicity.SchemaDiscovery.Entities.Project.LoadFromFile(localSchemaFile);

foreach (AppSimplicity.SchemaDiscovery.Entities.DataSource ds in project.DataSources)
{
    foreach (AppSimplicity.SchemaDiscovery.Entities.Table table in ds.Tables)
    {
        string scope = "";
        switch (table.Scope) 
        {
			case AppSimplicity.SchemaDiscovery.Entities.AbstractTable.ClassScopes._Friend:
                scope = "sealed";
                break;
            case AppSimplicity.SchemaDiscovery.Entities.AbstractTable.ClassScopes._Protected:
                scope = "protected";
                break;
            case AppSimplicity.SchemaDiscovery.Entities.AbstractTable.ClassScopes._Public:
                scope = "public";
                break;				 
        }
#>
using System;
using System.Collections.Generic;
using System.Text;

namespace <#= project.RootNamespace #>.<#= ds.GeneratedNamespace #>
{
    <#= scope #> partial class <#= table.ClassName #>
    {
	
<#
    foreach (AppSimplicity.SchemaDiscovery.Entities.Column column in table.Columns) 
    { 
#>
		private <#= column.CLRTargetType #> _<#= column.PropertyName #>;
        public <#= column.CLRTargetType #> <#= column.PropertyName #> 
        {
            get {
                return _<#= column.PropertyName #>;
           
            set {
                _<#= column.PropertyName #> = value;
            }
        }
<#
    }
#>
    }
}
<#             
        
			SaveOutput(String.Format(@"..\Conarte\{0}.cs", table.ClassName));
        }
    
    }
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
