Namespace ActiveRecord
    ''' <summary>
    ''' The purpose of this class is to convert ActiveRecord CRUDs and QueryBuilders 
    ''' into ready to execute DataCommand operations
    ''' </summary>
    ''' <remarks></remarks>
    Public Class ActiveHelper

#Region "Properties"
        Private _DataService As DataAccess.DataService
        Private ReadOnly Property DataService() As DataAccess.DataService
            Get
                Return _DataService
            End Get
        End Property

        Private ReadOnly Property Dialect() As DataAccess.Dialect.DialectBase
            Get
                Return Me.DataService.Dialect
            End Get
        End Property

        Private ReadOnly Property DataProvider() As DataAccess.Providers.Provider
            Get
                Return Me.DataService.Provider
            End Get
        End Property
#End Region

#Region "CRUD Methods"
        Private Function GetCommand(ByVal pSQLStatement As String) As DataAccess.DataCommand
            Dim lCommand As DataAccess.DataCommand

            If (Me.DataService.UseSPsForCRUD) Then
                lCommand = Me.DataProvider.CreateSPCommand(pSQLStatement)
            Else
                lCommand = Me.DataProvider.CreateCommand(pSQLStatement)
            End If

            Return lCommand
        End Function

#Region "CRUD Commands"
        Public Function _INSERT(ByVal pActiveRecord As ActiveRecord) As DataAccess.DataCommand
            Dim lCommand As DataAccess.DataCommand = GetCommand(pActiveRecord.Schema.INSERT_Statement)

            Dim lIncludeInList As Boolean
            For Each lColumn As String In pActiveRecord.Schema.AllColumns
                lIncludeInList = False

                If (pActiveRecord.Schema(lColumn).IsPrimaryKey) Then
                    If Not (pActiveRecord.Schema.IdIsAutogenerated) Then
                        lIncludeInList = True
                    End If
                Else
                    lIncludeInList = True
                End If

                If (lIncludeInList) Then
                    lCommand.AddParameter(Me.Dialect.GetParameterName(pActiveRecord.Schema(lColumn)), pActiveRecord(lColumn).UnderlyingValue)
                End If
            Next

            Return lCommand
        End Function

        Public Function _UPDATE(ByVal pActiveRecord As ActiveRecord) As DataAccess.DataCommand
            Dim lCommand As DataAccess.DataCommand = GetCommand(pActiveRecord.Schema.UPDATE_Statement)

            For Each lColumn As String In pActiveRecord.Schema.AllColumns
                lCommand.AddParameter(Me.Dialect.GetParameterName(pActiveRecord.Schema(lColumn)), pActiveRecord(lColumn).UnderlyingValue)
            Next

            Return lCommand
        End Function

        Public Function _DELETE(ByVal pActiveRecord As ActiveRecord) As DataAccess.DataCommand
            Dim lCommand As DataAccess.DataCommand = GetCommand(pActiveRecord.Schema.DELETE_Statement)

            lCommand.AddParameter(Me.Dialect.GetParameterName(pActiveRecord.Identity.Column), pActiveRecord.Identity.Value)

            Return lCommand
        End Function

        Public Function _READ(ByVal pActiveRecord As ActiveRecord) As DataAccess.DataCommand
            Dim lCommand As DataAccess.DataCommand = Me.GetCommand(pActiveRecord.Schema.SELECT_BY_ID_Statement)

            lCommand.AddParameter(Me.Dialect.GetParameterName(pActiveRecord.Identity.Column), pActiveRecord.Identity.Value)

            Return lCommand
        End Function
#End Region

#End Region
        Public Sub New(ByVal pDataService As DataAccess.DataService)
            Me._DataService = pDataService
        End Sub
    End Class
End Namespace
