<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="E:\Projects\AppSimplicity.CodeGoogle\AppSimplicity-ORM\AppSimplicityORM_Research\References\AppSimplicity.SchemaDiscovery.dll" #>
<#@ Import Namespace="AppSimplicity.SchemaDiscovery.Entities" #>
using System;
using System.Collections.Generic;
using AppSimplicity.ActiveRecord.Interfaces;

<#
	//TODO: Hacer que el proyecto se cargue de una ruta relativa:
	Project project = Project.LoadFromFile(@"E:\Projects\AppSimplicity.CodeGoogle\AppSimplicity-ORM\AppSimplicityORM_Research\Conarte.Entities\AppSimplicity\AppSimplicity.SchemaDiscovery.xml");    
    
    foreach (DataSource ds in project.DataSources)
    {
	    ds.GeneratedNamespace = "Conarte.Entities"; //TODO: look for rootnamespace in .csproj.	 			 															 
#>
namespace <#= ds.GeneratedNamespace #> {
<#
	 	  
		foreach (Table table in ds.Tables)
		{	      
	        if (true) // determine if we should skip creating class
            {
	            table.SetDataSource(ds);

#>	
	public partial class <#= table.ClassName #> : IActiveRecord
	{
		
<#
                foreach (Column col in table.Columns)
                {
	                string NullableSymbol = "";
					if (col.IsNullable) 
                    {
	                    NullableSymbol = col.IsCLRNullable == true ? "? " : "";
                    }                    														 
	                
#>
			private <#= col.CLRTargetType #> <#= NullableSymbol #>_<#= col.PropertyName #>;
			public <#= col.CLRTargetType #> <#= NullableSymbol #><#= col.PropertyName #> 
			{
				get 
				{	
					return _<#= col.PropertyName #>;
				}
				set 
				{
					_<#= col.PropertyName #> = value;
				}
			}

<#			
				}
#>
#region BelongsToRelationShips
<#
	            renderBelongsToRelationShips(table);
#>
#endregion
#region HasManyRelationShips
<#
	            renderHasManyRelationShips(table);
#>
#endregion
	} // end class
<#   

			} // end if (table.IncludeInCodeGeneration)
		}
        
#>
	} // end namespace
<#        
	}
#>
<#+

	public void renderBelongsToRelationShips(Table table) 
    {
	    foreach (RelationShip rel in table.BelongsToRelationShips) 
        { 
#>
		private <#= table.DataSource.GeneratedNamespace #>.<#= rel.ForeignEntityName #> _<#= rel.ForeignEntityName #>;
		public <#= rel.ForeignEntityName #> <#= rel.ForeignEntityName #> 
		{
			get { return _<#= rel.ForeignEntityName #>; }
			set { _<#= rel.ForeignEntityName #> = value; }
		}
<#+			
        }
    }
#>
<#+
	/// <summary>
	/// Renders all HasMany relationShips
	/// </summary>
	/// <param name="table"></param>
	public void renderHasManyRelationShips(Table table) 
    {
	    foreach (RelationShip rel in table.HasManyRelationships) 
        {
	        Table foreignTable = GetTableByEntityName(rel.ForeignEntityName, table.DataSource);
            if (foreignTable != null) 
            { 
#>
		private List<<#= table.DataSource.GeneratedNamespace #>.<#= foreignTable.ClassName #>> _<#= foreignTable.PluralClassName #>;
		public List<<#= table.DataSource.GeneratedNamespace #>.<#= foreignTable.ClassName #>> <#= foreignTable.PluralClassName #>
		{
			get 
			{
				return _<#= foreignTable.PluralClassName #>;
			}
			set 
			{
				_<#= foreignTable.PluralClassName #> = value;
			}
		}
<#+            
            }
				    

        }
    }
#>
<#+
	public Table GetTableByEntityName(string tableName, DataSource ds) 
    {
	    foreach (Table table in ds.Tables) 
        {
	        if (table.ClassName == tableName) 
            {
	            return table;
            }
        }
        return null;                                                                                                                                                                                                                                                                                     
    }
#>