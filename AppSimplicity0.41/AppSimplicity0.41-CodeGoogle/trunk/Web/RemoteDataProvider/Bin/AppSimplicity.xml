<?xml version="1.0"?>
<doc>
<assembly>
<name>
AppSimplicity
</name>
</assembly>
<members>
<member name="P:AppSimplicity.ActiveRecord.Query.QueryBuilder.ParamCount">
	<summary>
 Lleva el contador de parámetros
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.ColumnName">
	<summary>
 Establece u obtiene el nombre de la columna
 </summary>
	<value>Una cadena que contiene el nombre de la columna</value>
	<returns>El nombre de la columna en la tabla física</returns>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.Schema">
	<summary>
 Obtiene o establece el esquema de la tabla a la que pertenece la columna
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.DataType">
	<summary>
 Obtiene el tipo de dato que se puede almacenar en la columna
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.IsText">
	<summary>
 Determina si la columna puede contener valor de texto
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.IsNumeric">
	<summary>
 Determina si la columna puede contener un valor numérico
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.IsDate">
	<summary>
 Determina si la columna puede contener un valor de fecha
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.FieldLabel">
	<summary>
 Obtiene el título del control de la interfaz de usuario
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.GridCaption">
	<summary>
 Obtiene la descripción de una columna
 </summary>
	<remarks>Esta propiedad se utiliza para propósitos de presentación únicamente</remarks>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.IsDescription">
	<summary>
 Determina si una columna contiene una descripción para el registro
 </summary>
	<returns>A boolean that indicates if the column contains a description value</returns>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.MaxLength">
	<summary>
 Establece la longitud máxima en caracteres del campo
 </summary>
	<remarks>Aplica únicamente para columnas que pueden almacenar datos de tipo cadena (como son VARCHAR, CHAR, TEXT, etc.)</remarks>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.AutoIncrement">
	<summary>
 Propiedad que determina si una columna es autoincremental
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.IsNullable">
	<summary>
 Establece si el contenido de la columna puede ser un valor de tipo a System.DBnull.Value
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.SchemaColumn.IsPrimaryKey">
	<summary>
 Determina si la columna se define como llave primaria 
 </summary>
</member><member name="T:AppSimplicity.ActiveRecord.SchemaColumn">
	<summary>
 Representa las intancias de de cada columna de las tablas 
 mapeadas desde la base de datos.
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.DataValue.Column">
	<summary>
 Contiene la definición de la columna
 </summary>
	<returns>Obtiene el objeto de la columna asociada</returns>
</member><member name="P:AppSimplicity.ActiveRecord.DataValue.UnderlyingValue">
	<summary>
 Obtiene el dato almacenado sin realizar ninguna transformación
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.DataValue.Value">
	<summary>
 Establece u obtiene el valor almacenado en la columna, 
 cuando el valor de la tabla física contiene NULL el valor Nothing 
 será devuelto a la propiedad.
 </summary>
	<value>Si el valor es una cadena string, el maximo valor será validado</value>
	<returns>Devuelve el valor almacenado</returns>
</member><member name="P:AppSimplicity.ActiveRecord.DataValue.IsDBNull">
	<summary>
 Determina si el valor almacenado es un valur NULL
 </summary>
	<returns>Devuelve verdadero cuando el valor almacenado es NULL</returns>
</member><member name="M:AppSimplicity.ActiveRecord.DataValue.#ctor(AppSimplicity.ActiveRecord.SchemaColumn)">
	<summary>
 Inicializa el objeto del valor con la definición de la columna
 </summary>
	<param name="pColumn">Requiere un objeto TableColumn para ser instanciado</param>
</member><member name="T:AppSimplicity.ActiveRecord.DataValue">
	<summary>
 El uso de los objetos derivados de esta clase es para almacenar 
 los datos en los campos obtenidos del registro físico del objeto mapeado.
 </summary>
</member><member name="F:AppSimplicity.DataAccess.ProviderTypes.SQLServer">
	<summary>
 Provider for SQLServer database engine
 </summary>
</member><member name="F:AppSimplicity.DataAccess.ProviderTypes.SQLite">
	<summary>
 Provider for SQLite database engine
 </summary>
</member><member name="F:AppSimplicity.DataAccess.ProviderTypes.MySQL">
	<summary>
 Provider for MySQL database engine
 </summary>
</member><member name="F:AppSimplicity.DataAccess.ProviderTypes.Oracle">
	<summary>
 Provider for Oracle (integrated ADO.Net provider)
 </summary>
</member><member name="F:AppSimplicity.DataAccess.ProviderTypes.Oracle10g">
	<summary>
 Provider for Oracle10g (propietary ADO.Net provider)
 </summary>
</member><member name="T:AppSimplicity.DataAccess.ProviderTypes">
	<summary>
 List the types of data providers
 </summary>
</member><member name="P:AppSimplicity.DataAccess.DataCommand.CommandType">
	<summary>
 Determines whether the type of command is a stored procedure or a sql statement
 </summary>
</member><member name="P:AppSimplicity.DataAccess.DataCommand.Parameters">
	<summary>
 Keeps the list of parameters associated with data command
 </summary>
</member><member name="P:AppSimplicity.DataAccess.DataCommand.SQLCommand">
	<summary>
 Sets or gets the data command sql statement
 </summary>
</member><member name="M:AppSimplicity.DataAccess.DataCommand.AddParameter(System.String,System.Object)">
	<summary>
 Adds a parameter to the command parameters collection of data.
 </summary>
	<param name="pParameterName">Specifies the parameter name</param>
	<param name="pParameterValue">Determines the value of parameter</param>
	<remarks></remarks>
</member><member name="M:AppSimplicity.DataAccess.DataCommand.AddParameter(AppSimplicity.DataAccess.DataCommandParameter)">
	<summary>
 Adds a parameter to the command parameters collection of data.
 </summary>
	<param name="pParameter">Specifies the parameter</param>
</member><member name="T:AppSimplicity.DataAccess.DataCommand">
	<summary>
 The objects that inherit from this class may perform command executions to the data provider
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Query.Comparison.LogicalOperator">
	<summary>
 Indica el tipo de operador lógico que se utilizará para la sentencia
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Query.Comparison.Parameters">
	<summary>
 Almacena los parametros para realizar la consulta
 </summary>
</member><member name="T:AppSimplicity.DataAccess.Providers.SQLServerProvider">
	<summary>
 It encapsulates the behavior of a data provider for SQLClient namespace
 </summary>
	<remarks></remarks>
</member><member name="P:AppSimplicity.DataAccess.Providers.IDataProvider.CanHandleTransactions">
	<summary>
 Determines whether the instance is a transactional data provider
 </summary>
</member><member name="P:AppSimplicity.DataAccess.Providers.IDataProvider.CanHandleConnectedReaders">
	<summary>
 Determines whether the data provider can return connected data readers
 </summary>
</member><member name="M:AppSimplicity.DataAccess.Providers.IDataProvider.BeginTransaction(System.Data.IsolationLevel)">
	<summary>
 Starts a transaction in the context of the data provider
 </summary>
	<param name="pIsolationLevel">Determines the level of isolation in transaction.</param>
</member><member name="M:AppSimplicity.DataAccess.Providers.IDataProvider.CommitTransaction">
	<summary>
 Run the changes made under the context of the transaction
 </summary>
</member><member name="M:AppSimplicity.DataAccess.Providers.IDataProvider.RollBackTransaction">
	<summary>
 Undo the changes made under the context of the transaction
 </summary>
</member><member name="M:AppSimplicity.DataAccess.Providers.IDataProvider.ExecuteDataSet(AppSimplicity.DataAccess.DataCommand)">
	<summary>
 Execute a command of data and returns a dataset
 </summary>
	<param name="pCommand">Represents the data request command</param>
</member><member name="M:AppSimplicity.DataAccess.Providers.IDataProvider.ExecuteDataReader(AppSimplicity.DataAccess.DataCommand)">
	<summary>
 Execute a command of data and returns an instance of a connected data reader
 </summary>
	<param name="pCommand">Represents the data request command</param>
</member><member name="M:AppSimplicity.DataAccess.Providers.IDataProvider.ExecuteScalar(AppSimplicity.DataAccess.DataCommand)">
	<summary>
 Execute a command of data and returns the result of a data command which results matrix is 1x1
 </summary>
	<param name="pCommand">Represents the data request command</param>
</member><member name="M:AppSimplicity.DataAccess.Providers.IDataProvider.ExecuteNonQuery(AppSimplicity.DataAccess.DataCommand)">
	<summary>
 Execute a command of data and returns the number of rows affected
 </summary>
	<param name="pCommand">Represents the data request command</param>
</member><member name="T:AppSimplicity.DataAccess.Providers.IDataProvider">
	<summary>
 The purpose of this interface is to implement classes that may function as data providers.
 </summary>
</member><member name="P:AppSimplicity.My.Resources.ExceptionMessages.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:AppSimplicity.My.Resources.ExceptionMessages.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:AppSimplicity.My.Resources.ExceptionMessages.CantReadConnectionString">
	<summary>
  Looks up a localized string similar to Unable to find a connection string named "{0}".  Verify configuration file..
</summary>
</member><member name="P:AppSimplicity.My.Resources.ExceptionMessages.InvalidProviderName">
	<summary>
  Looks up a localized string similar to Provider name is invalid in connection string "{0}.  Valid provider names are : {0}"..
</summary>
</member><member name="T:AppSimplicity.My.Resources.ExceptionMessages">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.TableName">
	<summary>
 Obtiene el nombre de la tabla física mapeada
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.Item(System.String)">
	<summary>
 Obtiene la instancia de la columna determinada por la clave
 </summary>
	<param name="pKey">La clave de la columna (el nombre de la columna en la tabla físicamente mapeada)</param>
	<value></value>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.IsReadOnly">
	<summary>
 Determina si los objetos que utilicen este esquema podrán realizar operaciones de escritura hacia la tabla física.
 </summary>
	<remarks>Las vistas son tablas acceso de sólo lectura</remarks>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.IdIsAutoGenerated">
	<summary>
 Indica si el campo de la llave primaria se genera automáticamente
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.PKColumn">
	<summary>
 Obtiene la columna que contiene el valor de la llave primaria
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.DescriptionColumns">
	<summary>
 Obtiene los nombres de las columnas que describen al objeto
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.DataService">
	<summary>
 Obtiene el ambiente de conexión de la tabla
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.AllColumns">
	<summary>
 Contiene la lista de las columnas declaradas dentro del esquema
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.InsertSQLStatement">
	<summary>
 Obtiene la sentencia SQL de inserción de la tabla mapeada
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.DeleteSQLStatement">
	<summary>
 Gets a formatted SQL statement for deletion
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.SelectSQLStatement">
	<summary>
 Obtiene la sentencia SQL para realizar un SELECT sobre un elemento en base a su id
 </summary>
</member><member name="P:AppSimplicity.ActiveRecord.Schema.UpdateSQLStatement">
	<summary>
 Obtiene la sentencia SQL 
 </summary>
</member><member name="M:AppSimplicity.ActiveRecord.Schema.AddColumn(AppSimplicity.ActiveRecord.SchemaColumn)">
	<summary>
 Agrega la definición de una columna
 </summary>
	<param name="pColumn">La instancia preconfigurada de la columna</param>
</member><member name="M:AppSimplicity.ActiveRecord.Schema.Contains(System.String)">
	<summary>
 Averigua si un determinado nombre de columna está definido dentro del esquema
 </summary>
	<param name="pKey">Un nombre de columna</param>
	<returns>Devuelve True cuando el nombre de la columna existe</returns>
</member><member name="M:AppSimplicity.ActiveRecord.Schema.ValidateColumnName(System.String)">
	<summary>
 Valida si un nombre determinado de columna existe dentro del esquema
 </summary>
	<param name="pColumnName"></param>
	<remarks></remarks>
</member><member name="M:AppSimplicity.ActiveRecord.Schema.ValidateWritingOperation">
	<summary>
 Valida si es posible realizar operaciones de escritura
 </summary>
</member><member name="M:AppSimplicity.ActiveRecord.Schema.#ctor(System.String,AppSimplicity.DataAccess.DataService,System.Boolean)">
	<summary>
 Inicializa el esquema para una tipo de entidad
 </summary>
	<param name="pTableName">El nombre de la tabla</param>
	<param name="pIsReadOnly">Determina si las operaciones para este esquema será de sólo lectura</param>
	<param name="pService">El servicio de datos de conexión</param>
	<remarks>Las vistas deberán ser inicializadas como sólo lectura ('ReadOnly')</remarks>
</member><member name="M:AppSimplicity.DataAccess.Providers.SQL92DialectProvider.GetCommaSeparatedColumns(AppSimplicity.ActiveRecord.Schema,System.Boolean,AppSimplicity.DataAccess.Providers.SQL92DialectProvider.ColumnFormat)">
	<summary>
 Obtiene la lista de columnas en una cadena
 </summary>
	<param name="pSchema">El esquema que contiene la lista de columnas</param>
	<param name="pIncludeIdentity">Determina si se debe incluir el campo identidad</param>
	<param name="pFormat">Determina él formato de la lista de parametros</param>
	<returns>Devuelve la lista de columnas en una cadena</returns>
</member><member name="M:AppSimplicity.DataAccess.Providers.SQL92DialectProvider.GetComparisonString(AppSimplicity.ActiveRecord.Query.Comparison,System.Boolean)">
	<summary>
 Obtiene la cadena de comparación en SQL
 </summary>
	<param name="pIncludeOperator">Determina si debe incluir el operador lógico o no</param>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.#ctor">
	<remarks/>
</member><member name="E:AppSimplicity.RemoteDataService.DataService.ExecuteDataSetCompleted">
	<remarks/>
</member><member name="E:AppSimplicity.RemoteDataService.DataService.ExecuteNonQueryCompleted">
	<remarks/>
</member><member name="E:AppSimplicity.RemoteDataService.DataService.ExecuteScalarCompleted">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteDataSet(System.String,AppSimplicity.RemoteDataService.DataCommand)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteDataSetAsync(System.String,AppSimplicity.RemoteDataService.DataCommand)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteDataSetAsync(System.String,AppSimplicity.RemoteDataService.DataCommand,System.Object)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteNonQuery(System.String,AppSimplicity.RemoteDataService.DataCommand)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteNonQueryAsync(System.String,AppSimplicity.RemoteDataService.DataCommand)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteNonQueryAsync(System.String,AppSimplicity.RemoteDataService.DataCommand,System.Object)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteScalar(System.String,AppSimplicity.RemoteDataService.DataCommand)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteScalarAsync(System.String,AppSimplicity.RemoteDataService.DataCommand)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.ExecuteScalarAsync(System.String,AppSimplicity.RemoteDataService.DataCommand,System.Object)">
	<remarks/>
</member><member name="M:AppSimplicity.RemoteDataService.DataService.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.DataService">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.DataCommand.CommandType">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.DataCommand.Parameters">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.DataCommand.SQLCommand">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.DataCommand">
	<remarks/>
</member><member name="F:AppSimplicity.RemoteDataService.CommandType.Text">
	<remarks/>
</member><member name="F:AppSimplicity.RemoteDataService.CommandType.StoredProcedure">
	<remarks/>
</member><member name="F:AppSimplicity.RemoteDataService.CommandType.TableDirect">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.CommandType">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.DataCommandParameter.Name">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.DataCommandParameter.Value">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.DataCommandParameter">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.ExecuteDataSetCompletedEventHandler">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.ExecuteDataSetCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.ExecuteDataSetCompletedEventArgs">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.ExecuteNonQueryCompletedEventHandler">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.ExecuteNonQueryCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.ExecuteNonQueryCompletedEventArgs">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.ExecuteScalarCompletedEventHandler">
	<remarks/>
</member><member name="P:AppSimplicity.RemoteDataService.ExecuteScalarCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:AppSimplicity.RemoteDataService.ExecuteScalarCompletedEventArgs">
	<remarks/>
</member>
</members>
</doc>