Namespace ActiveRecord
    'TODO: documentar esta clase:

    Public Class Schema
#Region "Properties"

        Private _Dictionary As Dictionary(Of String, SchemaColumn)
        Private ReadOnly Property Dictionary() As Dictionary(Of String, SchemaColumn)
            Get
                If (_Dictionary Is Nothing) Then
                    _Dictionary = New Dictionary(Of String, SchemaColumn)
                End If
                Return _Dictionary
            End Get
        End Property

        Private _TableName As String
        ''' <summary>
        ''' Obtiene el nombre de la tabla física mapeada
        ''' </summary>
        Public ReadOnly Property TableName() As String
            Get
                Return _TableName
            End Get
        End Property

        ''' <summary>
        ''' Obtiene la instancia de la columna determinada por la clave
        ''' </summary>
        ''' <param name="pKey">La clave de la columna (el nombre de la columna en la tabla físicamente mapeada)</param>
        ''' <value></value>
        Default Public ReadOnly Property Item(ByVal pKey As String) As SchemaColumn
            Get
                Return Me.Dictionary(pKey)
            End Get
        End Property

        Private _IsReadOnly As Boolean = False
        ''' <summary>
        ''' Determina si los objetos que utilicen este esquema podrán realizar operaciones de escritura hacia la tabla física.
        ''' </summary>
        ''' <remarks>Las vistas son tablas acceso de sólo lectura</remarks>
        Public Property IsReadOnly() As Boolean
            Get
                Return _IsReadOnly
            End Get
            Set(ByVal value As Boolean)
                _IsReadOnly = True
            End Set
        End Property

        ''' <summary>
        ''' Indica si el campo de la llave primaria se genera automáticamente
        ''' </summary>        
        Public ReadOnly Property IdIsAutoGenerated() As Boolean
            Get
                Dim lValue As Boolean = False

                If Not (Me.PKColumn Is Nothing) Then
                    If Me.PKColumn.AutoIncrement Then
                        lValue = True
                    End If
                End If

                Return lValue
            End Get
        End Property

        Private _PKColumn As SchemaColumn
        ''' <summary>
        ''' Obtiene la columna que contiene el valor de la llave primaria
        ''' </summary>
        Public ReadOnly Property PKColumn() As SchemaColumn
            Get
                Return _PKColumn
            End Get
        End Property

        Private _DescriptionColumns As List(Of String)
        ''' <summary>
        ''' Obtiene los nombres de las columnas que describen al objeto
        ''' </summary>        
        Public ReadOnly Property DescriptionColumns() As List(Of String)
            Get
                If _DescriptionColumns Is Nothing Then
                    _DescriptionColumns = New List(Of String)
                    For Each lkey As String In Me.AllColumns
                        If Me(lkey).IsDescription Then
                            _DescriptionColumns.Add(lkey)
                        End If
                    Next
                End If
                Return _DescriptionColumns
            End Get
        End Property

        Private _DataService As DataAccess.DataService
        ''' <summary>
        ''' Obtiene el ambiente de conexión de la tabla
        ''' </summary>
        Public ReadOnly Property DataService() As DataAccess.DataService
            Get
                Return _DataService
            End Get
        End Property

        Private _AllColumns As List(Of String)
        ''' <summary>
        ''' Contiene la lista de las columnas declaradas dentro del esquema
        ''' </summary>
        Public ReadOnly Property AllColumns() As List(Of String)
            Get
                If (_AllColumns Is Nothing) Then
                    _AllColumns = New List(Of String)

                    For Each lKey As String In Me.Dictionary.Keys
                        _AllColumns.Add(lKey)
                    Next
                End If
                Return _AllColumns
            End Get
        End Property

#End Region

#Region "CRUD strings"
        Private _InsertSQLStatement As String = String.Empty
        ''' <summary>
        ''' Obtiene la sentencia SQL de inserción de la tabla mapeada
        ''' </summary>
        Public ReadOnly Property InsertSQLStatement() As String
            Get
                If (_InsertSQLStatement = String.Empty) Then
                    _InsertSQLStatement = Me.DataService.Dialect.Get_INSERT_Statement(Me)
                End If

                Return _InsertSQLStatement
            End Get
        End Property

        Private _DeleteSQLStatement As String = String.Empty
        ''' <summary>
        ''' Gets a formatted SQL statement for deletion
        ''' </summary>
        Public ReadOnly Property DeleteSQLStatement() As String
            Get
                If (_DeleteSQLStatement = String.Empty) Then
                    _DeleteSQLStatement = Me.DataService.Dialect.Get_DELETE_Statement(Me)
                End If

                Return _DeleteSQLStatement
            End Get
        End Property

        Private _SelectSQLStatement As String = String.Empty
        ''' <summary>
        ''' Obtiene la sentencia SQL para realizar un SELECT sobre un elemento en base a su id
        ''' </summary>
        Public ReadOnly Property SelectSQLStatement() As String
            Get
                If (_SelectSQLStatement = String.Empty) Then
                    _SelectSQLStatement = Me.DataService.Dialect.Get_SELECTBYID_Statement(Me)
                End If

                Return _SelectSQLStatement
            End Get
        End Property

        Private _UpdateSQLStatement As String = String.Empty
        ''' <summary>
        ''' Obtiene la sentencia SQL 
        ''' </summary>
        Public ReadOnly Property UpdateSQLStatement() As String
            Get
                If (_UpdateSQLStatement = String.Empty) Then
                    _UpdateSQLStatement = Me.DataService.Dialect.Get_UPDATE_Statement(Me)
                End If

                Return _UpdateSQLStatement
            End Get
        End Property
#End Region

#Region "Métodos"
        ''' <summary>
        ''' Agrega la definición de una columna
        ''' </summary>
        ''' <param name="pColumn">La instancia preconfigurada de la columna</param>
        Public Sub AddColumn(ByVal pColumn As SchemaColumn)

            If (pColumn.IsPrimaryKey) Then
                If (_PKColumn Is Nothing) Then
                    _PKColumn = pColumn
                End If
            End If

            pColumn.Schema = Me
            Me.Dictionary.Add(pColumn.ColumnName, pColumn)
        End Sub

        ''' <summary>
        ''' Averigua si un determinado nombre de columna está definido dentro del esquema
        ''' </summary>
        ''' <param name="pKey">Un nombre de columna</param>
        ''' <returns>Devuelve True cuando el nombre de la columna existe</returns>
        Public Function Contains(ByVal pKey As String) As Boolean
            Return Me.Dictionary.ContainsKey(pKey)
        End Function

        ''' <summary>
        ''' Valida si un nombre determinado de columna existe dentro del esquema
        ''' </summary>
        ''' <param name="pColumnName"></param>
        ''' <remarks></remarks>
        Public Sub ValidateColumnName(ByVal pColumnName As String)
            If Not Me.Contains(pColumnName) Then
                Throw New Exception(String.Format("La columna [{0}] no existe en el esquema de la tabla [{1}]", pColumnName, Me.TableName))
            End If
        End Sub
#End Region

#Region "Métodos Privados"
        ''' <summary>
        ''' Valida si es posible realizar operaciones de escritura
        ''' </summary>
        Private Sub ValidateWritingOperation()
            If (_IsReadOnly) Then
                Throw New Exception(String.Format("La tabla [{0}] ha sido inicializada como 'Sólo lectura', las operaciones de escritura no son permitidas.", TableName))
            End If
        End Sub

#End Region



#Region ".ctors"
        ''' <summary>
        ''' Inicializa el esquema para una tipo de entidad
        ''' </summary>
        ''' <param name="pTableName">El nombre de la tabla</param>
        ''' <param name="pIsReadOnly">Determina si las operaciones para este esquema será de sólo lectura</param>
        ''' <param name="pService">El servicio de datos de conexión</param>
        ''' <remarks>Las vistas deberán ser inicializadas como sólo lectura ('ReadOnly')</remarks>
        Public Sub New(ByVal pTableName As String, ByVal pService As DataAccess.DataService, ByVal pIsReadOnly As Boolean)
            _TableName = pTableName
            _IsReadOnly = pIsReadOnly
            _DataService = pService
        End Sub
#End Region

    End Class
End Namespace

