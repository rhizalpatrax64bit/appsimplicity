<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EditItem_ASCvb" xml:space="preserve">
    <value>Partial Class Edit_[$ClassName]
    Inherits UI.EditItemWebControl

    Public Event OnCancel()

    Protected Sub LayoutSelector_OnLayoutSelection(ByVal pLayout As UI.EditItemWebControl.Layout) Handles LayoutSelector.OnLayoutSelection
        Me.SetLayoutMode(pLayout)
    End Sub

    ''' &lt;summary&gt;
    ''' Inicializa la forma con un objeto existente previamente instanciado
    ''' &lt;/summary&gt;
    ''' &lt;param name="pItem"&gt;Indica el objeto con el que se llenará la forma&lt;/param&gt;
    Public Sub FillForm(ByVal pItem As [$GeneratedNamespace].[$ClassName])
        Me.ItemId = pItem.[$PKPropertyName]      
        [$FillForm]        
    End Sub

    ''' &lt;summary&gt;
    ''' Inicializar combos
    ''' &lt;/summary&gt;
    Public Sub FillDDLs()
        [$FillDDls]        
    End Sub

    ''' &lt;summary&gt;
    ''' Prepara el formulario para iniciar una captura nueva
    ''' &lt;/summary&gt;
    Public Sub InitNewItem()
        Me.ItemId = Nothing
        Me.EditMode = EditModes.CreateNew

        [$ResetControls]        

        Me.FillDDLs()
        Me.ToolBarTop.EnableDelete = False
        Me.ToolBarBottom.EnableDelete = False
    End Sub

    ''' &lt;summary&gt;
    ''' Inicializa el formulario con la instancia de un objeto previamente instanciado
    ''' &lt;/summary&gt;
    Public Sub EditItem(ByVal pItem As [$GeneratedNamespace].[$ClassName])
        Me.EditMode = EditModes.EditItem
        Me.FillForm(pItem)
        
        Me.ToolBarTop.EnableDelete = True
        Me.ToolBarBottom.EnableDelete = True
    End Sub

    ''' &lt;summary&gt;
    ''' Determina el modo de edición de la página (Creación de un registro nuevo/Modificación de un registro)
    ''' &lt;/summary&gt;
    Private Sub SetEditMode()
        Dim lItem As [$GeneratedNamespace].[$ClassName] = Nothing

        Try
            If (Me.Request.QueryString("[$ClassName][$PKPropertyName]") &lt;&gt; String.Empty) Then
                lItem = [$GeneratedNamespace].[$PluralClassName].FetchById(Me.Request.QueryString("[$ClassName][$PKPropertyName]"))

                If Not (lItem Is Nothing) Then
                    Me.EditItem(lItem)
                Else
                    Throw New Exception("No se localizó el registro. Verifique el parámetro de la página.")
                End If
            Else
                Me.InitNewItem()
            End If
        Catch ex As Exception
            Me.FormAlert.DisplayAlert("Error", UI_WebControls_Application_Common_InLineAlert.Type.Critical, ex.Message)
            Me.InitNewItem()
        End Try        
    End Sub

#Region "Save"
    ''' &lt;summary&gt;
    ''' Ejecuta la validación de cada uno de los controles.  Valida los controles requeridos y que los valores tengan el formato correcto.
    ''' &lt;/summary&gt;
    Public Sub RunControlValidations()
        Dim lValidationErrors As New List(Of String)

        [$RunValidations]        

        If lValidationErrors.Count &gt; 0 Then
            Throw New Exception(Me.GetValidationSummary(lValidationErrors))
        End If
    End Sub

    ''' &lt;summary&gt;
    ''' Obtiene los datos del formulario hacia una instancia
    ''' &lt;/summary&gt;
    ''' &lt;param name="pItem"&gt;La instancia del objeto previamente instanciado&lt;/param&gt;
    Private Sub FillItem(ByVal pItem As [$GeneratedNamespace].[$ClassName])
    
        [$FillProperties]
        
    End Sub

    ''' &lt;summary&gt;
    ''' Guarda la información en la base de datos
    ''' &lt;/summary&gt;
    ''' &lt;returns&gt;Si la operación no es posible devuelve falso&lt;/returns&gt;
    Public Function Save() As Boolean
        Dim lReturnValue As Boolean = False

        Try
            Me.RunControlValidations()

            Dim lItem As [$GeneratedNamespace].[$ClassName] = Nothing

            Select Case (Me.EditMode)
                Case EditModes.CreateNew
                    lItem = New [$GeneratedNamespace].[$ClassName]
                Case EditModes.EditItem
                    lItem = [$GeneratedNamespace].[$PluralClassName].FetchById(Me.ItemId)

                    If (lItem Is Nothing) Then
                        Throw New Exception("La información del registro no está disponible en la base de datos.  Actualice la información.")
                    End If
            End Select

            Me.FillItem(lItem)
            lItem.Save()

            Me.EditItem(lItem)

            lReturnValue = True
        Catch ex As Exception
            Me.FormAlert.DisplayAlert(ex.Message)
            lReturnValue = False
        End Try

        Return lReturnValue
    End Function
#End Region

#Region "Delete"
    ''' &lt;summary&gt;
    ''' Ejecuta el método de eliminación
    ''' &lt;/summary&gt;
    ''' &lt;remarks&gt;&lt;/remarks&gt;
    Private Sub Delete()
        Try
            If (Me.EditMode = EditModes.EditItem) Then
                Dim lItem As [$GeneratedNamespace].[$ClassName]

                lItem = [$GeneratedNamespace].[$PluralClassName].FetchById(Me.ItemId)

                If Not (lItem Is Nothing) Then
                    lItem.Delete()                    
                    Me.FormAlert.DisplayAlert("Información", UI_WebControls_Application_Common_InLineAlert.Type.Information, "El registro se ha eliminado con éxito.")
                    Me.InitNewItem()
                End If
            End If
        Catch ex As Exception
            Me.FormAlert.DisplayAlert(ex.Message)
        End Try
    End Sub
#End Region

#Region "Init"
    Public Overrides Sub Initialize()
        Me.FillDDLs()
        Me.SetEditMode()
    End Sub
#End Region

#Region "ToolBar Commands"
    Protected Sub ToolBarTop_OnCancel() Handles ToolBarTop.OnCancel
        RaiseEvent OnCancel()
    End Sub

    Protected Sub ToolBarBottom_OnCancel() Handles ToolBarBottom.OnCancel
        RaiseEvent OnCancel()
    End Sub

    Protected Sub ToolBarTop_OnDelete() Handles ToolBarTop.OnDelete
        Me.Delete()
    End Sub

    Protected Sub ToolBarBottom_OnDelete() Handles ToolBarBottom.OnDelete
        Me.Delete()
    End Sub

    Protected Sub ToolBarTop_OnNew() Handles ToolBarTop.OnNew
        Me.InitNewItem()
    End Sub

    Protected Sub ToolBarBottom_OnNew() Handles ToolBarBottom.OnNew
        Me.InitNewItem()
    End Sub

    Protected Sub ToolBarTop_OnSave() Handles ToolBarTop.OnSave
        If (Me.Save()) Then
            Me.FormAlert.DisplayAlert("Información", UI_WebControls_Application_Common_InLineAlert.Type.Information, "El registro ha sido guardado con éxito")
        End If
    End Sub

    Protected Sub ToolBarBottom_OnSave() Handles ToolBarBottom.OnSave
        If (Me.Save()) Then
            Me.FormAlert.DisplayAlert("Información", UI_WebControls_Application_Common_InLineAlert.Type.Information, "El registro ha sido guardado con éxito")
        End If
    End Sub

    Protected Sub ToolBarTop_OnSaveNew() Handles ToolBarTop.OnSaveNew
        If (Me.Save()) Then
            Me.InitNewItem()
            Me.FormAlert.DisplayAlert("Información", UI_WebControls_Application_Common_InLineAlert.Type.Information, "El registro ha sido guardado con éxito")
        End If
    End Sub

    Protected Sub ToolBarBottom_OnSaveNew() Handles ToolBarBottom.OnSaveNew
        If (Me.Save()) Then
            Me.InitNewItem()
            Me.FormAlert.DisplayAlert("Información", UI_WebControls_Application_Common_InLineAlert.Type.Information, "El registro ha sido guardado con éxito")
        End If
    End Sub
#End Region
    
End Class</value>
  </data>
  <data name="EditItem_ASCX" xml:space="preserve">
    <value>&lt;%@ Control Language="VB" AutoEventWireup="false" CodeFile="Edit_[$ClassName].ascx.vb" Inherits="Edit_[$ClassName]" %&gt;

&lt;%@ Register src="../../../WebControls/Application/Edit/TextEditControl.ascx" tagname="TextEditControl" tagprefix="TextEditControl" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Edit/TextAreaEditControl.ascx" tagname="TextAreaEditControl" tagprefix="TextAreaEditControl" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Edit/NumericEditControl.ascx" tagname="NumericEditControl" tagprefix="NumericEditControl" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Edit/FloatNumericEditControl.ascx" tagname="FloatNumericEditControl" tagprefix="FloatNumericEditControl" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Edit/CheckBoxEditControl.ascx" tagname="CheckBoxEditControl" tagprefix="CheckBoxEditControl" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Edit/DatePickerEditControl.ascx" tagname="DatePickerEditControl" tagprefix="DatePickerEditControl" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Edit/DDLEditControl.ascx" tagname="DDLEditControl" tagprefix="DDLEditControl" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Form/FormLayoutSelector.ascx" tagname="FormLayoutSelector" tagprefix="FormLayoutSelector" %&gt;
&lt;%@ Register src="../../../WebControls/Application/Common/InLineAlert.ascx" tagname="InLineAlert" tagprefix="InLineAlert" %&gt;
&lt;%@ Register src="Edit_Toolbar_[$ClassName].ascx" tagname="Edit_Toolbar_[$ClassName]" tagprefix="EditToolBar" %&gt;

&lt;table width="95%" cellpadding="0" cellspacing="0" align="center"&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;table width="100%" cellpadding="0" cellspacing="0" border="0"&gt;
                &lt;tr&gt;
                    &lt;td width="100%" valign="middle"&gt;
                        Crear / Editar [$ClassName]
                    &lt;/td&gt;
                    &lt;td valign="middle"&gt;
                       &lt;FormLayoutSelector:FormLayoutSelector ID="LayoutSelector" runat="server" /&gt;                       
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/td&gt;
    &lt;/tr&gt;    
    &lt;tr&gt;
        &lt;td&gt;
            &lt;EditToolBar:Edit_Toolbar_[$ClassName] ID="ToolBarTop" runat="server" /&gt;            
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;            
            &lt;InLineAlert:InLineAlert ID="FormAlert" runat="server" /&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;            
            &lt;table border="0" width="95%" align="center" cellpadding="5" cellspacing="0"&gt;
                &lt;tr&gt;
                    &lt;td valign="top"&gt;
                    
                        &lt;div id="FormLayout" runat="server" &gt;
                        
                            &lt;ul class="form-layout"&gt;
                                [$Controls]
                            &lt;/ul&gt;
                            
                        &lt;/div&gt;                    
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;EditToolBar:Edit_Toolbar_[$ClassName] ID="ToolBarBottom" runat="server" /&gt;                      
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</value>
  </data>
  <data name="ToolBarASCX" xml:space="preserve">
    <value>&lt;%@ Control Language="VB" AutoEventWireup="false" CodeFile="Edit_Toolbar_{0}.ascx.vb" Inherits="Edit_Toolbar_{0}" %&gt;

&lt;div class="toolbar"&gt;
    &lt;table border="0" cellpadding="0" cellspacing="5" width="10"&gt;
        &lt;tr&gt;                
            &lt;td&gt;&lt;asp:Button ID="btnSave" runat="server" Text="guardar" /&gt;&lt;/td&gt;        
            &lt;td&gt;&lt;asp:Button ID="btnSaveNew" runat="server" Text="guardar y crear nuevo" /&gt;&lt;/td&gt;                            
            &lt;td&gt;&lt;asp:Button ID="btnCancel" runat="server" Text="cancelar" /&gt;&lt;/td&gt;                            
            &lt;td&gt;&lt;asp:Button ID="btnDelete" runat="server" Text="eliminar" /&gt;&lt;/td&gt;                            
            &lt;td&gt;&lt;asp:Button ID="btnNew" runat="server" Text="crear nuevo..." /&gt;&lt;/td&gt;        
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;</value>
  </data>
  <data name="ToolBarASCXvb" xml:space="preserve">
    <value>Partial Class Edit_Toolbar_{0}
    Inherits UI.EditToolbarControl

End Class</value>
  </data>
  <data name="RunValidationCodeBlock" xml:space="preserve">
    <value>        Try
            Me.{0}.ValidateInput()
        Catch ex As Exception
            lValidationErrors.Add(ex.Message)
        End Try</value>
  </data>
  <data name="EditItem_ASPX" xml:space="preserve">
    <value>&lt;%@ Page Language="VB" MasterPageFile="~/UI/PageThemes/Default/Layout/MasterPage.master" AutoEventWireup="false" CodeFile="Edit[$ClassName].aspx.vb" Inherits="[$GeneratedNamespace]_[$PluralClassName]_Edit[$ClassName]" title="Crear / Editar [$ClassName]" %&gt;
&lt;%@ OutputCache Duration="1" VaryByParam="FondoId" NoStore="true" %&gt;

&lt;%@ Register src="../../../CustomControls/[$GeneratedNamespace]/[$PluralClassName]/Edit_[$ClassName].ascx" tagname="Edit_[$ClassName]" tagprefix="ctrl[$ClassName]" %&gt;

&lt;asp:Content ID="Content1" ContentPlaceHolderID="head" Runat="Server"&gt;
&lt;/asp:Content&gt;
&lt;asp:Content ID="Content2" ContentPlaceHolderID="ContentCPH" Runat="Server"&gt;    

    &lt;ctrl[$ClassName]:Edit_[$ClassName] ID="ctrl_Edit[$ClassName]" runat="server" /&gt;    

&lt;/asp:Content&gt;</value>
  </data>
  <data name="EditItem_ASPXvb" xml:space="preserve">
    <value>Partial Class [$GeneratedNamespace]_[$PluralClassName]_Edit[$ClassName]
    Inherits UI.BasePage

    Public Overrides Sub Initialize()

    End Sub

    Protected Sub ctrl_Edit[$ClassName]_OnCancel() Handles ctrl_Edit[$ClassName].OnCancel
        If (Me.ctrl_Edit[$ClassName].EditMode = UI.EditItemWebControl.EditModes.CreateNew) Then
            Response.Redirect("List[$PluralClassName].aspx")
        Else
            Response.Redirect("View[$ClassName].aspx")
        End If
    End Sub
End Class</value>
  </data>
  <data name="GridViewASCX" xml:space="preserve">
    <value>&lt;%@ Control Language="VB" AutoEventWireup="false" CodeFile="GridView_[$PluralClassName].ascx.vb" Inherits="[$GeneratedNamespace]_[$PluralClassName]_GridView[$ClassName]" %&gt;

&lt;table width="100%" align="center" border="0" cellpadding="0" cellspacing="0" &gt;
&lt;tr&gt;
&lt;td valign="top" &gt;
    
&lt;div style="width:950px;height:500px;overflow:auto;" class="GridPanel" id="GridPanel" runat="server"&gt;                  
&lt;asp:UpdatePanel ID="AjaxGridViewPanel" runat="server"&gt;
&lt;ContentTemplate&gt;
&lt;asp:GridView ID="DataGrid" runat="server" AllowPaging="True"  
        PageSize="17" AllowSorting="true" AutoGenerateColumns="False" Width="[$Width]" &gt;                        
                 
&lt;Columns&gt;
    &lt;asp:TemplateField ItemStyle-Width="10"&gt; 
        &lt;ItemTemplate&gt;
            &lt;asp:HiddenField runat="server" id="SelectedId" /&gt;
            &lt;asp:CheckBox runat="server" id="chkSelection" /&gt;                            
        &lt;/ItemTemplate&gt;                                
        &lt;ItemStyle Width="10px" /&gt;
    &lt;/asp:TemplateField&gt;   
    
    &lt;asp:TemplateField ItemStyle-Width="21"&gt; 
        &lt;ItemTemplate&gt;
            &lt;asp:Image ID="EditIcon" runat="server" ImageUrl="~/Assets/icons/edit.gif" 
                Height="21px" Width="21px" AlternateText="Editar registro"  /&gt;
        &lt;/ItemTemplate&gt;                                
        &lt;ItemStyle Width="21px" /&gt;
    &lt;/asp:TemplateField&gt;         
    
[$Columns]

&lt;/Columns&gt;

&lt;/asp:GridView&gt;
&lt;/ContentTemplate&gt;                                
&lt;/asp:UpdatePanel&gt;
&lt;/div&gt;        
    
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</value>
  </data>
  <data name="GridViewASCXvb" xml:space="preserve">
    <value>Partial Class [$GeneratedNamespace]_[$PluralClassName]_GridView[$ClassName]
    Inherits UI.GenericGridControl

End Class</value>
  </data>
  <data name="GridColumn_Boolean" xml:space="preserve">
    <value>&lt;asp:CheckBoxField DataField="[$TableName].[$ColumnName]" HeaderText="[$GridCaption]" SortExpression="[$TableName].[$ColumnName]" &gt;
    &lt;ItemStyle Width="62px"  /&gt;
&lt;/asp:CheckBoxField&gt;</value>
  </data>
  <data name="GridColumn_String" xml:space="preserve">
    <value>&lt;asp:BoundField DataField="[$TableName].[$ColumnName]" HeaderText="[$GridCaption]" SortExpression="[$TableName].[$ColumnName]"  &gt;
&lt;ItemStyle Width="[$Width]px" /&gt;
&lt;/asp:BoundField&gt;</value>
  </data>
  <data name="GridColumn_DateTime" xml:space="preserve">
    <value>&lt;asp:BoundField DataField="[$TableName].[$ColumnName]" HeaderText="[$GridCaption]" DataFormatString="{0:dd/MMM/yyyy hh:mmt}m"  SortExpression="[$TableName].[$ColumnName]"  &gt;                            
&lt;ItemStyle Width="160px" /&gt;
&lt;/asp:BoundField&gt;</value>
  </data>
  <data name="GridColumn_Numeric" xml:space="preserve">
    <value>&lt;asp:BoundField DataField="[$TableName].[$ColumnName]" HeaderText="[$GridCaption]" SortExpression="[$TableName].[$ColumnName]" &gt;
&lt;ItemStyle Width="[$Width]px" Wrap="False" HorizontalAlign="Left" /&gt;
&lt;/asp:BoundField&gt;</value>
  </data>
  <data name="GridColumn_Decimal" xml:space="preserve">
    <value>&lt;asp:BoundField DataField="[$TableName].[$ColumnName]" HeaderText="[$GridCaption]" SortExpression="[$TableName].[$ColumnName]" DataFormatString="{0:##,##0.00}" &gt;
&lt;ItemStyle Width="[$Width]px" Wrap="False" HorizontalAlign="Left" /&gt;
&lt;/asp:BoundField&gt;</value>
  </data>
</root>